model START
-- classes

class Hospital
attributes
  name : String
  phone : Integer
  address : String
end

class Patient
attributes
  FirstName : String
  LastName : String
  id : String
  gender : Gender
  birthday : Integer
  dateAdmit : String
  timeAdmit : String
  accident : Boolean
  assigned : Boolean
  riskChecked: Boolean
end

class TreatedPatient
attributes
  canWalk: Boolean
  SpontaneousBreathing: Boolean
  respiratoryRate: Integer
  radicalPulse: Boolean
  capillaryRefill: Integer
  MentalStatus: String
end

class Severity
attributes
  severity: severity
operations
  assessWalk(p: Patient)
  checkBreathing(p: Patient)
  measureRespiratoryRate(p: Patient)
  checkRadicalPulse(p: Patient)
  masureCapillaryRefill(p: Patient)
  examineMentalStatus(p: Patient)
end

class breathing
attributes
  breathing: Boolean
operations
  changePosition(p: Patient)
  recheck(p: Patient)
end

class Minor
operations
  canWait(p: Patient)
end

class Expectant
operations
  informFamily(p: Patient)
end

class Immediate
operations
  PerformSurgery(p: Patient)
end

class Delayed
operations
  canWait(p: Patient)
end

-- associations

composition ConsistOf between
  Hospital[1]
  Patient[1..*]
end

association patient between
  Patient[1]
  TreatedPatient[1]
end

association check between
  breathing[1]
  TreatedPatient[1]
end

association treated between
  Severity[1]
  TreatedPatient[1]
end

association delayed between
  Delayed[1]
  Severity[1]
end

association minor between
  Severity[1]
  Minor[1]
end

association immediate between
  Severity[1]
  Immediate[1]
end

association expectant between
  Severity[1]
  Expectant[1]
end
-- enumeration

enum severity {Expectant, Immediate, Delayed, Minor}
enum Gender {Male, Female}

--constraints

--constraints

--context WalkAbility::check(p: Patient)
--post  p.is_checked= true


--context SpontaneousBreathing::check(p : Patient)
--pre checkPre1: p.can_walk -> false
--post checkPost1: boolean p.is_breathing = true
